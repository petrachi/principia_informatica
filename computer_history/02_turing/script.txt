===
Gödel (Livre)
===

- Paradoxe De Burali-Forti (1897):
- Cantor dévelloppe la théorie des ensembles de 1873-1897 pour répondre à des problème d'analyses
- Un des premiers réultat est la distinction entre continu et dénombrable (deux puissances d'infini) -> Tous les infinis ne se valent pas, certains sont plus grand que d'autres.
- l'hypothése du continu de cantor suggére qu'il n'y a pas de puissance intermédiaire entre le dénombrable et le continu
- pour mesurer la puissance de l'infini, Cantor développe les nombres ordinaux (1883 + 1895-97).
- ω est l'ordinal de la suite des nombres entiers
- ω1 est l'ordinal de la suite des ordinaux dénombrables
- l'hypothése de Cantor est que l'infini continu à la même puissance que ω1
- BF cherche à créer l'ordinal de la suite des ordinaux. Une suite devrait générer un ordinal, mais comme un nouvel ordinal serait inclus dans cette suite, ça ne serait pas l'orinal de la suite des oridinaux, donc il ne peux pas y avoir d'ordinal pour cette suite, mais une suite devrait avoir un ordinal.


- Russell, l'ensemble des cuilleres à thé n'est pas une cuieller à thé, il ne s'appartient pas à lui même.
- "être vert" est une propriété (la pomme est verte), qui ne s'applique pas à elle même (le concept "être vert" n'est pas vert lui même). On appelle hétérologie le concept des concepts qui ne s'appliquent pas à eux même. Mais l'héterologie est elle hétérologique ? S'il était hétérologique, il s'appliquerait à lui même, et ne serait pas hétérologique. S'il n'était pas hétérologique, il ne s'appliquerait pas à lui même et serait hétérologique.

- Ponicaré meurt en 1912, sans avoir eu le temps de proposer sa propre solution au pb des fondements

_ Les principia mathematica se basent, pour l'essentiel, sur les théses de Russell (article 1908, "la logique mathématique fondée sur la théorie des types")

- l'infini actuel est utilisé dés l'arithmétique élémentaire, avec le principe du tiers exclu
- principe du tiers exclus : ou bien tous les entiers vérifient P, ou bien il en existe au moins un pour lequel P est faux. Si on est dans le second cas, on affirme l'existence d'un entier qui ne vérifie pas P, avant même de l'avoir calculé
- Le tiers exclu suppose que tous les nombres existent en soi, et ont des propriétés.
- Pointcaré prône le principe de constructivité : un objet mathématique n'existe pas tant que le mathématicien ne l'a pas crée.
- L'intuitionisme admet la même chose, les objets sont engendrés par la consience mathématicienne, qui vit dans le temps. (donc, pour le paradoxe de Richard, le nombre crée à partir de l'ensemble E ne peut pas y appartenir, puisqu'on l'à crée après l'ensemble E)
- H admet pour le programme formaliste le principe de constructivité -> math finitiste, plus strct que l'intuitionnisme

- l'axiomatique, c'est comme la grammaire d'une langue, pas besoin de connaitre le sens des phrases

- le calcul des prédicats représente la structure logique la plus générale des domaines mathématiques.

- Skolem 1923 montre qu'aucun systéme de mathématique classique n'est catégorique. c-a-d: un systéme qui correspondrait point par point à un domaine mathématique, ce qui les rendrait indiscernables.
- systéme = systéme d'axiome
- domaine = théorie mathématique, qui se rapporte à un domaine d'objet (les nombres en arithmétique, les points en géométrie)

- complétude sémantique : un systéme qui peut s'appliquer dans différents domaines, de sorte que ce qui est vrai dans un domaine est également vrai dans un autre
- complétude syntaxique : tout est soit vrai, soit faux
- catégoricité implique complétude syntaxique
- complétude syntaxique implique décidabilité (on ne le savait pas du temps d'H)

- Zermelo axiomatise la théorie des ensembles en 1908, et élimine les paradoxes

- second théoreme d'incomplétude: la consistance d'un systéme ne peut pas être établie au moyen de raisonnements qui se laisseraient formaliser dans le systéme.
- la mathématique finiste est formalisable en arithmétique, on ne peut pas l'utiliser pour prouver la consistance de l'arithmétique.

- 1931 ne clot pas les recherches autour du programme formaliste, il reste la décidabilité : Existe-t-il une procédure uniforme, mécanique, capable de décider ...
- Il faut donner une définition formelle à la notion de "procédure mécanique", qui jusque là ne porte que son sens intuitif.
- entre 1934 et 1937, Gödel, Church et Turing vont donner une définition chacun.

- calcul des prédicats :
- "Si Jean chante, il pleut. Jean chante. Par conséquent, il pleut"
- "Jean aime Marie. Par conséquent, quelqu'un aime Marie"
- 1 = (p -> q   p)/q (qui se lit, p implique q, p alors q)
- 2 = (Rab)/(Ex Rxb) (qui se lit, Relation entre ab et b alors il existe x tel que Relation entre x et b)
- 1 = calcul des propositions
- 2 = calcul des prédicats (fait intervenir la structure interne des proposition, via des quatificateur (ici le 'il existe'))
- à lexception de l'analyse, toutes les théories mathématiques sont formalisées à l'aide du calcul des prédicats.
- la 1° formalisation est due à Frege dans 'idéographie' en 1871. Puis modifiés dans principia mathematica (godel utilise celles la), puis aujourd'hui, on utilise celles de H et Ackermann dans "éléments de la logique théorie (1928)"

- théormes d'incomplétude
- 1° théoréme : été 1930
- il fait la différence entre vérité et démontrabilité, et cherche une formule vraie qui n'est pas démontrable
- il communique son résultat dans une lettre à Carnap le 26 aout 1930, puis le présente dans un colloque à Köningsberg (où sont présents Carnap, Heyting et von Neumann)
- Von Neumann est le seul à réaliser l'importance du théorème, et suggére quelques modification à Gödel.
- Von Neumann écrit quelques mois plus tard à Gödel, en disant qu'il à déduit un second théorème à partir du premier. Gödel est arrivé à la même conclusion et a envoyé quelques jours avant un manuscrit à une revue de Vienne, qui publiera en 1931.
- L'article sera présenté comme thése d'habilitation pour Gödel, et sera accepté à 49 contre 1. Gödel pourra enseigner à Vienne à partir de 1933.

- tout language formel, consistant, et suffisamment riche pour exprimer les nombres entiers et les opérations d'addition et de multiplication, permettent de formuler des propositions indécidables.

- un language incomplet peut être complété (en ajoutant les propositions indécidables comme axiomes), ce faisant on crée un nouveau language, encore une fois incomplet. Mais on peut supposer qu'une suite indéfinie de languages forme un édifice complet.

- 1°théoréme: si l'arithmétique élémantaire est ω-consistante, elle comporte des formules fermées qui ne sont ni démontrables, ni réfutables à partir des axiomes.
- arithmétique élémentaire = système d'axiome, exprimé dans le calcul des prédicats, permettant de définir les entiers avec les opérations d'addition et de multiplication.
- formule fermée = formule sans variables libres ( cad, toutes les variables sont liés à un quatificateur "il existe"/"quel que soit")
- ω-consistant = il est impossible de vérifier une propriété P pour chacun des entiers naturels, et de démontrer la formule "il existe un entier ne vérifiant pas P" (c'est une consistance++, qui inclut le tiers exclu)

- 2° théoréme: si l'arithmétique élémentaire est consistante, sa consistance, qui s'exprime par une formule dans le système, ne peut être provée à partir des axiomes.


- J.Rosser en 1936 montre qu'on peut remplacer pour le 1° théoréme la ω-consistante par la simple consistance

- en plus de l'arithmétique élémentaire, ces deux théorèmes fonctionnement pour des systèmes ajoutant un nombre indéfini d'axiomes. Par cela, on s'attend à ce que pour systéme formel, il existe une procédure uniforme, une liste d'instruction à appliquer de façon mécanique, qui puisse reconnaitre les formules.
- il n'existe pas de définition de "procédure mécanique" en 1931. La portée de ces théorème est suspendue à la définition de "procédure mécanique", cad, de "calculabilité"
- une autre question est de savoir s'il existe des formules indécidables parmis les problémes qu'étudient les mathématiciens (la formule de Gödel est ad hoc, et ne signifie rien pour le mathématicien)
- H croit que tout probléme à une solution. Gödel ne renie par cette pensée, il dit juste que certains problémes n'ont pas de solution dans certains systèmes. (un probléme indécidable en arithmétique pourra avoir une solution en théorie des ensembles)

- Godel, 193? : "la conviction dans la décidabilité de tout problème mathématique n'est pas ébranlée par ce résultat".

- les théorèmes remettent aussi en question les autres axiomatisations que l'arithmétique. Puisqu'il est possible de construire des systèmes consistants, mais dont certains axiomes seraient absurde (cad faux, dans un sens classique du terme, mais vrai mathématiquement puisque ce sont des axiomes). Donc, pour justifier une axiomatique, il ne suffit plus de prouver sa consistance, il faut également redonner leurs sens aux formules. On en revient aux discutions épistémologiques de 1910, sur l'existance "en soi" des objets mathématiques.

- deux autres problèmes :
- définition de la calculabilité (dont dépends la généralisation du théoréme d'incomplétude)
- définition de la vérité (avant, la vérité des axiomes était lié à la consistance du système, si le système est syntaxiquement consistant, les axiomes sont vrais, et les formules démontrables sont vraies aussi). Gödel, sur son travail, à commencé par distinguer démontrabilité et vérité. Tarski en 1935 donnera cette définition (le concept de vérité dans les languages formalisés)

- à partir de 1933, Gödel voyage souvent à princeton (il s'y installera en 1939), où il rencontre Church, S.Kleene, et croise Turing.

- le probléme de la calculabilité ressurgit avec le th d'incomplétude & le pb de décidabilité
- le pb de la décidabilité est lié à la calculabilité : pour définir si une formule est démontrable, on traduit cette formule de son sens métamathématique à l'arithmétique (comme godel pour le th d'incomplétude), puis on voit si la fonction qui résulte de cette traduction est oui ou non calculable
- définir la calculabilité = définir un ensemble de fonctions qui disposent d'un algorithme, d'une suite d'instructions que l'on peut suivre pour parvenir au résultat.

- la méthode de diagonalisation semble empêcher la définition de la calculabilité (si on liste toute les fonctions calculables, infini dénombrable donc, on peut créer une nouvelle fonction calculable qui n'est pas dans la liste, donc la définition est mauvaise)
- Keene 1979 : "Lorsque Church me proposa sa thèse [pour une définition de la calculabilité], je me mis aussitôt à la tâche de la réfuter par une diagonalisation de la classe des fonctions [calculables]. Mais, réalisant vite que la diagonalisation ne pouvait être faite de façon effective, je devins du jour au lendemain partisan de la thèse de Church".

- une T-machine peut être représentée par une code, un entier. Mais tous les entiers ne représentent pas une T-machine
- la solution du "le problème de l'arrêt" dit qu'il n'existe pas de T-machine qui peut dire, lorsqu'on lui soumet un code (un entier), si ce code représente une T-machine ou non.
- on peut arriver à ce résultat par la diagonalisation, si il existe une T-machine capable de dire si un code est une T-machine ou pas, on peut, en testant successivement tous les entiers faire la liste des T-machines. Puis on définit une fonction f(n) = (valeur que donne la n-iéme T-machine à n) + 1. la fonction f serait donc calculable, mais pas par une T-machine (puisque f(n) est forcément différent de la valeur que donne la n-iéme T-machine à n).
- comme la définition de "calculable" est "calculable par une T-machine", notre hypothèse de départ est fausse, et il ne peut pas exister de T-machine qui dit, pour un code donné, si ce code correspond à une T-machine.
- donc il existe des fonctions qui ne sont pas calculables
- et comme on peut traduire en arithmétique la proposition P(n) : n est le code d'une T-machine, il existe des problémes qu'une T-machine ne peut pas résoudre, donc l'arithmétique est indécidable.
- Turing retourne en quelque sorte l'argument de la diagonale (qui au départ semblait poser un obstacle à la définition de calculabilité)
- Lancan, 1973, résume dans une boutade : "j'ai trois frères, Jean, Jacques et moi."

- l'article de Turing en 1937 est l'aboutissement d'une série de travaux sur la calculabilité
- Gödel définit une classe de fonctions calculables en 1931, dite "fonctions récursives primitives"
- Mais on connait depuis 1926 une fonction calculable qui n'est pas récursive primitive (dû à Ackermann, un éléve de Hilbert)
- 1934, Church et Godel publient chacun une définition, elles sont équivalentes. Mais la difficulté est de trouver une justification épistémologique, de reconnaitre un sens intuitif à ces définition (Les machines de turing sont directement intuitives)
- Turing prouvera aussi que sa définition est équivalente avec celles de church & godel.

- Turing compare la machine à l'activité cérébrale humaine. lorsqu'on multiplie par exemple, les écritures qu'on réalise en deux dimensions sur une feuille de papier peuvent être reprotées sur une seule dimension, l'action du calculateur est déteriné par le symbole qui se trouve devant lui, et par l'état mental dans lequel il se trouve. L'homme qui calcule agit comme une machine.
- L'humain ne dispose que d'une quantitée finie d'états mentaux.
- Turing, "on computable numbers" 1937: "si nous admettions une infinité d'états d'esprit, certains d'entre eux seraient arbitrairement proches et se confondraient [dans le calcul]"
- si on peut faire des calculs corrects, c'est qu'on ne confonds pas les états d'esprits, donc qu'ils sont finis, comme dans la machine

- machines sans cercles = code correct, la machine arrive à une approximation de plus en plus précise d'un nombre, ou bien s'arrête.
- machines circulaires = code incorrect
- probléme de l'arret = deviner si une machine est circulaire ou pas.
- décidabilité = probleme de l'arret

- avec sa conclusion négative au pb de décidabilité, turing retrouve les résultats de Godel de 1931.
- On dispose d'une machine qui peut lister une à une toutes les formules démontrables de l'arithmétique. Pour savoir si une formule est démontrable, il suffit de laisser tourner cette machine et d'attendre que la machine écrive soit la formule (démontrable) ou son contraire (réfutable).
- Mais si on pouvait faire ça, on aurait du même coup une procédure de décidabilité.
- donc la complétude sémantique implique la décidabilité.
- la réponse négative au pb de décidabilité donne donc une nouvelle démonstration du th de godel

- la nouvelle définition de Turing n'apporte rien de nouveau aux mathématiques (il y a déjà les définitions de church & godel), mais apportent un sens épistémologique. Les définition de church et godel se basaient sur des systèmes formels, dépourvus de sens. La définition de turing se base sur la définition de machine dans le language naturel.
- le contenu épistémologique de church & godel étaient insuffisant.

- Le probléme du fondement se tourne vers la différence entre l'esprit et la machine. Dans l'article de Turing, l'esprit est considéré comme une machine. Mais pour soutenir la thèse de la résolubilité de tout problème mathématique (comme hilbert, et Godel), il faut réussir à distinguer la différence entre la machine et l'esprit. pour cela, il faut montrer un raisonnement qui fait intervenir le sens des symboles, qu'une machine ne pourrait donc pas suivre (car elle évolue uniquement dans la manipulation des symboles, c'est un système formel)

- dans un article de 1939, Turing ajoute un "oracle" à ses machines, qui permet de résoudre des problèmes arithmétique, et dont on peut seulement dire qu'il n'est pas mécanique
- Turing renoncera à l'oracle, mais participe à la recherche de ce qu'il faut rajouter à une machine de Turing, pour en faire un "esprit". L'oracle permet à la machine de se comprendre elle-même (ce qui était impossible avant, puisqu'une machine ne peut pas prédire une autre machine, ou elle-même, donc, ne peut pas se comprendre elle-même)

- Godel reproche à Turing, dans son analogie esprit-machine, de ne pas prendre en compte l'évolution de l'esprit (1972, conversations avec Wang) : "Ce que Turing à négligé [en identifiant l'esprit à une machine], c'est que l'esprit, en pratique, n'est pas statique mais en développement permanent"

- La thése de Turing repose sur deux choses : Le nombre d'états interne du cerveau est limité (par le nombre de neurones dans le cerveau, et les états seraient représenté par les connections entre les neurones, qui sont soit ouvertes soit fermés (il faut que ça soit une valeur discréte))
- et, les états du cerveaux sont un parralélisme avec les états de l'esprit. à chaque état du cerveau correspond un état d'esprit, et un changement dans l'état du cerveau implique un changement dans l'état d'esprit.
- ces théses impliquent que le cerveau est une machine de Turing, et qu'i existe des problèmes indécidables pour l'esprit humain

- Godel pense que l'esprit humain à la possibilité d'un progrés infini. Godel refuse l'hypothése du parralelisme du cerveau : (dans wang, 1972) "ce parallélisme est un préjugé de notre temps".

- Gödel  quitte l'Allemagne en 1939
- été 1937, Gödel établit la consistance de l'hypothése du continu
- Gödel démontre que l'hypothése du continu ne peut pas être réfutée
- Il conjecture qu'elle est indécidable (donc également non démontrable, ça sera prouvé en 1966 par P.Cohen)
- à noter, elle est indécidable par rapport aux axiomes existant dans la théorie des ensembles, il n'est pas dit qu'elle le reste avec de nouveaux axiomes.
- GÖdel pense que l'hypothése du continu est vraie (et sera démontrés avec de nouveaux axiomes)

- Gôdel croit en l'existance en soi des objets mathématiques (en ooposition à l'intuitionnisme, pour lequel un objet existe quand le mathématicien le crée)
- Gödel 1947 : "[...] les concepts et les théorémes de la théorie des ensembles décrivent une réalité bien déterminée, dans laquelle la conjecture de Cantor est vraie ou fausse. Ainsi son indécidabilité à partir des axiomes acceptés aujourd'hui peut seulement signifier que ces axiomes ne contiennent pas une description complète de cette réalité."
- Gödel 1947 : "les mathématiques décrivent une réalité non sensible, qui existe indépendament des actes et des facultés de l'esprit humain et n'est que perçue, et probablement perçue de façon très incomplète."

- Gödel croit comme Hilbert à la résolubilité de tout problème. De mêm, il croit que les mathématiques existent.
- Pointcarré a le même point de vue "constructionniste" que les intuitionnistes, il croit que les objets mathématiques existent une fois qu'ils ont été construits par le mathématicien. D'où son analyse des paradoxes comprenant un cercle vicieux : Pour le paradoxe de Richard par exemple, on contruit un ensemble E, puis on construit un nombre qui appartient à E, mais pour le construire, on fait référence à E. Donc le nombre fait référence ç lui même dans sa construction (== construction imprédicative). Pointcaré veut interdire ce genre de cercle vicieux et uniquement authoriser les construction prédicatives, celles où un objet est crée à partir d'autres objets, de hiérarchie plus faible dans l'ordre de construction.
- Le constructionnisme de Poincaré ne reconnait pas l'existence des objets mathématiques, et donc, ne reconnait pas l'infini actuel, et donc le tiers exclu, etc.
- Mais l'intuitionnisme, qui est aussi constructionniste, posséde des incohérences, puisqu'il a parfois recours à des raisonnements imprédicatifs.
- principe du cercle vicieux, Russell : "Ce qui présuppose tous les éléments d'une collection ne doit pas être l'un des éléments de la collection; ou, sous la forme converse, si, du fait qu'une collection était totalisable, elle contiendrait des éléments qui ne seraient définissables qu'en termes de cette totalisation, alors la dite collection n'est pas totalisable".

- Pour son retour au programme de fondement, Gödel dit qu'on doit justifier les mathématiques avec une théorie plus étendue que le finitisme de H, et donc, justifier épistémologiquement la notion de l'infini. Pour cela, il veut justifier l'existance en soi de l'infini, et par la même, la capacité de l'esprit humain à raisonner dans l'infini.
- Turing comparait l'esprit à une machine, pour Gödel, comme il n'y a pas de problèmes insolubles, et qu'il en existe pour les machines, il faut différencier l'esprit de la machine.
- Godel 1961 "Dans l'établissement systématique des axiomes mathématiques, de nouveaux axiomes, qui ne découlent pas formellement des précédents, deviennent évidents [...]. C'est ce devenir évident de nouveaux axiomes, sur la base du sens des notions primitives, qu'une machine ne peut pas imiter".

- la diagonalisation nous oblige à admettre l'existance des objets mathématiques en soi, ou bien à refuser la proposition dans laquelle il intervient.
- diagolasition apparait chez Cantor en 1891.





===
Church (web)
===

- In 1936, Church created a method for defining functions called the lambda calculus (λ-calculus). Within λ-calculus, he defined an encoding of the natural numbers called the Church numerals. A function on the natural numbers is called λ-computable if the corresponding function on the Church numerals can be represented by a term of the λ-calculus (which is equivalent to using general recursive functions).
- In computability theory, the Church–Turing thesis is a hypothesis ("thesis") about the nature of computable functions. In simple terms, the Church–Turing thesis states that a function on the natural numbers is computable in an informal sense (i.e., computable by a human being using a pencil-and-paper method, ignoring resource limitations) if and only if it is computable by a Turing machine.
- In 1941 Church wrote the monograph The Calculi of Lambda-conversion, which was later useful to others in the development of semantics for programming languages. Today the λ-calculus is a major research topic in theoretical computer science.
- As one of his colleagues remembered, "Church read everything and forgot nothing". When asked what made Church a world-class scholar, he had a remarkably simple answer: "He was just smarter than anybody else."

- Church fait ses études à l'université de Princeton (new jersey, proche de NY)
- Avec son doctorat il reçoit une bourse de recherche nationale11 qu'il utilise pour voyager. Ainsi, durant l'été 1927 il est instructeur à l'Université de Chicago. Il passe deux ans à l'Université Harvard (1927-1928), puis se rend à l'Université de Göttingen où il rencontre David Hilbert et Paul Bernays puis à l'Université d'Amsterdam où il rencontre Luitzen Egbertus Jan Brouwer (1928-1929)
- Princeton dans les années 1930, est un lieu propice aux échanges en logique car John von Neumann s'y trouve, ainsi que trois étudiants brillants de Church, Stephen Kleene, John Barkley Rosser et Alan Turing. Kurt Gödel, après plusieurs déplacements à l'Institute for Advanced Study entre 1933 et 1935, y donne plusieurs conférences sur son théorème d'incomplétude, et s'y installe définitivement vers 1940.
- Les travaux de son équipe (Church, Kleene et Rosser) précèdent, sur le problème de l'arrêt, le travail d'Alan Turing, qui va d'ailleurs les rejoindre. C'est Church qui, le premier, a l'idée que l'on peut définir le concept de fonction calculable dans un sens très large, cette idée avait déjà été entrevue par Herbrand, mais sa mort prématurée ne lui avait pas permis de la pousser plus loin. Church en a eu l'idée par le lambda-calcul. Church démontre en 1936 l'existence d'un problème insoluble par algorithme, autrement qui ne peut pas être résolu par un calcul mécanisable.

- After graduating from Ridgefield in 1920, Church attended Princeton University where he was an exceptional student, publishing his first paper, on Lorentz transformations, and graduating in 1924 with a degree in mathematics. He stayed at Princeton, earning a Ph.D. in mathematics in three years under Oswald Veblen.
- He taught philosophy and mathematics at Princeton, 1929–1967
- The lambda calculus emerged in his 1936 paper showing the unsolvability of the Entscheidungsproblem. This result preceded Alan Turing's work on the halting problem, which also demonstrated the existence of a problem unsolvable by mechanical means. Church and Turing then showed that the lambda calculus and the Turing machine used in Turing's halting problem were equivalent in capabilities, and subsequently demonstrated a variety of alternative "mechanical processes for computation." This resulted in the Church–Turing thesis.
- The lambda calculus influenced the design of the LISP programming language and functional programming languages in general. The Church encoding is named in his honor.

- L'idée de base du lambda-calcul est que tout est fonction. Une fonction est en particulier exprimée par une expression qui peut contenir des fonctions qui ne sont pas encore définies et qui sont alors remplacées par des variables. Il y a donc, parmi les expressions du lambda-calcul, des expressions qui contiennent des variables. Que peut-on faire avec les fonctions ? On peut les « appliquer » à des valeurs qui sont elles-mêmes des fonctions, puisque tout est fonction. On a donc une opération de base, que l'on appelle « application ». Appliquer l'expression A  (qui décrit une fonction) à l'expression B  (qui décrit une fonction) se note A.B .
- Sur cette base, on peut construire quelques fonctions intéressantes, comme la fonction identité I , qui est la fonction qui à x  fait correspondre x , autrement dit la fonction λx.x . On peut aussi construire les fonctions constantes égales à x , à savoir λy.x . De là on peut construire la fonction qui fabrique les fonctions constantes, pourvu qu'on lui donne la constante comme paramètre, autrement dit la fonction λx.(λy.x)} , c'est-à-dire la fonction qui à x  fait correspondre la fonction constamment égale à x .
- L'idée du lambda-calcul consiste à fournir un langage précis pour décrire les fonctions et les simplifier.
- Le calcul associé à un lambda-terme est la suite de réductions qu'il engendre. Le terme est la description du calcul et la forme normale du terme10 (si elle existe) en est le résultat. Un lambda-terme t est dit en forme normale si aucune bêta-contraction ne peut lui être appliquée, c'est-à-dire si t ne contient aucun rédex, ou encore s'il n'existe aucun lambda-terme u tel que t → u.

- Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. It was first introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics.
The lambda calculus was introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics.[7][8] The original system was shown to be logically inconsistent in 1935 when Stephen Kleene and J. B. Rosser developed the Kleene–Rosser paradox. Subsequently, in 1936 Church isolated and published just the portion relevant to computation, what is now called the untyped lambda calculus.[9] In 1940, he also introduced a computationally weaker, but logically consistent system, known as the simply typed lambda calculus.[10]
- Computable functions are a fundamental concept within computer science and mathematics. The λ-calculus provides a simple semantics for computation, enabling properties of computation to be studied formally. The λ-calculus incorporates two simplifications that make this semantics simple. The first simplification is that the λ-calculus treats functions "anonymously", without giving them explicit names. The second simplification is that the λ-calculus only uses functions of a single input (currying).
- exemple : square_sum(x, y) => x*x + y*x
- becomes : (x, y) => x*x + y*y
- and then : x => (y => x*x + y*y)
- à l'appel : ((x => (y => x*x + y*y))(5))(2) - (y => 2*2 + y*y)(5) - 29

- A function F: N → N of natural numbers is a computable function if and only if there exists a lambda expression f such that for every pair of x, y in N, F(x)=y if and only if f x =β y,  where x and y are the Church numerals corresponding to x and y, respectively and =β meaning equivalence with beta reduction. This is one of the many ways to define computability
- There is no algorithm that takes as input two lambda expressions and outputs TRUE or FALSE depending on whether or not the two expressions are equivalent. This was historically the first problem for which undecidability could be proven. As is common for a proof of undecidability, the proof shows that no computable function can decide the equivalence. Church's thesis is then invoked to show that no algorithm can do so.
- Church's proof first reduces the problem to determining whether a given lambda expression has a normal form. A normal form is an equivalent expression that cannot be reduced any further under the rules imposed by the form. Then he assumes that this predicate is computable, and can hence be expressed in lambda calculus. Building on earlier work by Kleene and constructing a Gödel numbering for lambda expressions, he constructs a lambda expression e that closely follows the proof of Gödel's first incompleteness theorem. If e is applied to its own Gödel number, a contradiction results.

- Bien que Church soit sans nul doute le premier, au début des années 1930, à avoir pensé pouvoir définir formellement la calculabilité intuitive (par la λ-définissabilité)3, c'est cependant l'article d'Alan Turing de 1936 et son modèle mécanique de calculabilité, qui ont définitivement emporté l'adhésion, selon Gödel, Kleene et Church lui-même.

- La thèse de Church-Turing dit juste que ces définitions de calculabilités sont des bonnes définitions. C'est plus une hypothése qu'une thése (elle n'a pas été démontrée). Tout ce qui peut être calculé par une "procédure effective" peut être calculé par un lambda calcul, une machine de Turing, ...

- In 1933, Austrian-American mathematician Kurt Gödel, with Jacques Herbrand, created a formal definition of a class called general recursive functions. The class of general recursive functions is the smallest class of functions (possibly with more than one argument) which includes all constant functions, projections, the successor function, and which is closed under function composition and recursion.
- In 1936, Alonzo Church created a method for defining functions called the λ-calculus. Within λ-calculus, he defined an encoding of the natural numbers called the Church numerals. A function on the natural numbers is called λ-computable if the corresponding function on the Church numerals can be represented by a term of the λ-calculus.
- Also in 1936, before learning of Church's work, Alan Turing created a theoretical model for machines, now called Turing machines, that could carry out calculations from inputs by manipulating symbols on a tape. Given a suitable encoding of the natural numbers as sequences of symbols, a function on the natural numbers is called Turing computable if some Turing machine computes the corresponding function on encoded natural numbers.
- Church[2] and Turing[3] proved that these three formally defined classes of computable functions coincide: a function is λ-computable if and only if it is Turing computable if and only if it is general recursive. This has led mathematicians and computer scientists to believe that the concept of computability is accurately characterized by these three equivalent processes.

- Turing, 1939, Systems of Logic Based on Ordinals, " We shall use the expression 'computable function' to mean a function calculable by a machine, and let 'effectively calculable' refer to the intuitive idea without particular identification with any one of these definitions."
- Same "It was stated ... that 'a function is effectively calculable if its values can be found by some purely mechanical process.' We may take this literally, understanding that by a purely mechanical process one which could be carried out by a machine. The development ... leads to ... an identification of computability† with effective calculability."

- The debate began when Church proposed to Gödel that one should define the "effectively computable" functions as the λ-definable functions. Gödel, however, was not convinced and called the proposal "thoroughly unsatisfactory".[12] Rather, in correspondence with Church (ca 1934–5), Gödel proposed axiomatizing the notion of "effective calculability"; indeed, in a 1935 letter to Kleene, Church reported that: "His [Gödel's] only idea at the time was that it might be possible, in terms of effective calculability as an undefined notion, to state a set of axioms which would embody the generally accepted properties of this notion, and to do something on that basis"
- Gödel said that "he was, at the time of these [1934] lectures, not at all convinced that his concept of recursion comprised all possible recursions".[16] By 1963–4 Gödel would disavow Herbrand–Gödel recursion and the λ-calculus in favor of the Turing machine as the definition of "algorithm" or "mechanical procedure" or "formal system"
- Church was quick to recognise how compelling Turing's analysis was. In his review of Turing's paper[24] he made clear that Turing's notion made "the identification with effectiveness in the ordinary (not explicitly defined) sense evident immediately".

- Church spent two years as a National Research Fellow, one year at Harvard University then a year at Göttingen and Amsterdam. He returned to the United States becoming Assistant Professor of Mathematics at Princeton in 1929.
- Enderton writes in 1995: "Princeton in the 1930's was an exciting place for logic. There was Church together with his students Rosser and Kleene. There was John von Neumann. Alan Turing, who had been thinking about the notion of effective calculability, came as a visiting graduate student in 1936 and stayed to complete his Ph.D. under Church. And Kurt Gödel visited the Institute for Advanced Study in 1933 and 1935, before moving there permanently."
- He created the λ-calculus in the 1930's which today is an invaluable tool for computer scientists. The article 1997 is in three parts and in the last of these Manzano: "... attempt[s] to show that Church's great discovery was lambda calculus and that his remaining contributions were mainly inspired afterthoughts in the sense that most of his contributions, as well as some of his pupils', derive from that initial achievement."

===
Newman (web)
===

- Il a été nommé maître de conférences en mathématiques à Cambridge en 1924. Ses conférences sur les fondements des mathématiques ont inspiré Alan Turing. Après la Seconde Guerre mondiale, il a pris la tête du département de mathématiques de l'université de Manchester, jusqu'à sa retraite en 1964.
- Après s'être assuré que l'origine allemande de son père ne lui nuirait pas, Newman accepte en août 1942 la proposition qui lui était faite d'entrer au service de la Government Code & Cypher School à Bletchley Park. Il y participe à la conception d'un superordinateur destiné à casser les codes secrets.

- Max Newman was born Maxwell Neumann in Chelsea, London, England to a Jewish family, on 7 February 1897.[1] His father was Herman Alexander Neumann, originally from the German city of Bromberg (now in Poland) who had emigrated with his family to London at the age of 15.
- His studies were postponed by World War I. His father was interned as an enemy alien after the start of the war in 1914, and upon his release he returned to Germany. In 1916, Newman changed his name by deed poll to the anglicised "Newman" and Sarah did likewise in 1920.
- He was called up for military service in February 1918, but claimed conscientious objection due to his beliefs and his father's country of origin, and thereby avoided any direct role in the fighting.

- He was appointed a lecturer in mathematics at Cambridge in 1927,[1] where his 1935 lectures on the Foundations of Mathematics and Gödel's Theorem inspired Alan Turing to embark on his pioneering work on the Entscheidungsproblem (decision problem) using a hypothetical computing machine.[16][17] In spring 1936, Newman was presented by Turing with a draft of "On Computable Numbers with an Application to the Entscheidungsproblem". He realised the paper's importance and helped ensure swift publication.[13] Newman subsequently arranged for Turing to visit Princeton where Alonzo Church was working on the same problem but using his Lambda calculus.[12] During this period, Newman started to share Turing's dream of building a stored-program computing machine.

- Newman resumed his studies at St. John’s in 1919 and graduated in 1921 with a first class degree in Mathematics. Two years later he was appointed a Fellow of St. John’s and became a lecturer at Cambridge in 1927. In 1935, Alan Turing attended one of Newman’s lectures.

- While at Cambridge Newman taught a course on the foundations of mathematics. It was these lectures which introduced Turing to the concept of 'decidability' that in turn inspired Turing's famous paper, On Computable Numbers, with an application to the Entscheidungsproblem. which was published with considerable help from Newman.  Without Newman's encouragement, Turing might not have done this work and got drawn into codebreaking.


===
Gödel (web)
===

- Kurt attended school in Brünn, completing his school studies in 1923. His brother Rudolf said: "Even in High School my brother was somewhat more one-sided than me and to the astonishment of his teachers and fellow pupils had mastered university mathematics by his final Gymnasium years. ... Mathematics and languages ranked well above literature and history. At the time it was rumoured that in the whole of his time at High School not only was his work in Latin always given the top marks but that he had made not a single grammatical error."
- "Gödel's Incompleteness Theorems". In 1931 he published these results in Über formal unentscheidbare Sätze der Principia Mathematica und verwandter Systeme. He proved fundamental results about axiomatic systems, showing in any axiomatic mathematical system there are propositions that cannot be proved or disproved within the axioms of the system.

- Gödel met Zermelo in Bad Elster in 1931. Olga Taussky-Todd, who was at the same meeting, wrote: "The trouble with Zermelo was that he felt he had already achieved Gödel's most admired result himself. Scholz seemed to think that this was in fact the case, but he had not announced it and perhaps would never have done so. ... The peaceful meeting between Zermelo and Gödel at Bad Elster was not the start of a scientific friendship between two logicians."

- However, Gödel suffered a nervous breakdown as he arrived back in Europe and telephoned his brother Rudolf from Paris to say he was ill. He was treated by a psychiatrist and spent several months in a sanatorium recovering from depression.
- However after Schlick, whose seminar had aroused Gödel's interest in logic, was murdered by a National Socialist student in 1936, Gödel was much affected and had another breakdown. His brother Rudolf wrote: "This event was surely the reason why my brother went through a severe nervous crisis for some time, which was of course of great concern, above all for my mother. Soon after his recovery he received the first call to a Guest Professorship in the USA."

- Now 1933 was the year that Hitler came to power. At first this had no effect on Gödel's life in Vienna; he had little interest in politics.
- Most who held the title of privatdozent in Austria became paid lecturers after the country became part of Germany but Gödel did not and his application made on 25 September 1939 was given an unenthusiastic response. It seems that he was thought to be Jewish, but in fact this was entirely wrong, although he did have many Jewish friends. Others also mistook him for a Jew, and he was once attacked by a gang of youths, believing him to be a Jew, while out walking with his wife in Vienna.
- When the war started Gödel feared that he might be conscripted into the German army. Of course he was also convinced that he was in far too poor health to serve in the army, but if he could be mistaken for a Jew he might be mistaken for a healthy man. He was not prepared to risk this, and after lengthy negotiation to obtain a U.S. visa he was fortunate to be able to return to the United States, although he had to travel via Russia and Japan to do so. His wife accompanied him.

- In 1940 Gödel arrived in the United States, becoming a U.S. citizen in 1948 (in fact he believed he had found an inconsistency in the United States Constitution, but the judge had more sense than to listen during his interview!)

- He received the Einstein Award in 1951, and National Medal of Science in 1974. He was a member of the National Academy of Sciences of the United States, a fellow of the Royal Society, a member of the Institute of France, a fellow of the Royal Academy and an Honorary Member of the London Mathematical Society. However, it says much about his feelings towards Austria that he refused membership of the Academy of Sciences in Vienna, then later when he was elected to honorary membership he again refused the honour. He also refused to accept the highest National Medal for scientific and artistic achievement that Austria offered him. He certainly felt bitter at his own treatment but equally so about that of his family.

- Concerns with his health became increasingly worrying to Gödel as the years went by. Rudolf, Gödel's brother, was a medical doctor so the medical details given by him in the following will be accurate. He wrote: "My brother had a very individual and fixed opinion about everything and could hardly be convinced otherwise. Unfortunately he believed all his life that he was always right not only in mathematics but also in medicine, so he was a very difficult patient for doctors. After severe bleeding from a duodenal ulcer ... for the rest of his life he kept to an extremely strict (over strict?) diet which caused him slowly to lose weight."
- Gödel became convinced that he was being poisoned and, refusing to eat to avoid being poisoned, essentially starved himself to death [3]: "A slight person and very fastidious, Gödel was generally worried about his health and did not travel or lecture widely in later years. He had no doctoral students, but through correspondence and personal contact with the constant succession of visitors to Princeton, many people benefited from his extremely quick and incisive mind. Friend to Einstein, von Neumann and Morgenstern, he particularly enjoyed philosophical discussion". He died : "... sitting in a chair in his hospital room at Princeton, in the afternoon of 14 January 1978".


===
Turing (web)
===

- La procédure est formulée en termes d'étapes très simples, du type : « si vous êtes dans l'état 42 et que le symbole contenu sur la case que vous regardez est '0', alors remplacer ce symbole par un '1', passer dans l'état 17, et regarder une case adjacente (droite ou gauche) ».
- Mais, comme Alan Turing le décrivit, on peut encoder la table d'actions d'une machine de Turing sous la forme d'une chaîne de caractères. On peut donc tenter de construire une machine de Turing qui suppose l'existence sur son ruban d'une chaîne de caractères encodant une table d'actions, suivie d'une chaîne de caractères constituant les données effectives du ruban, et calcule le contenu du ruban que la machine de Turing encodée aurait calculé.

- Suppose, then, that we have a program P which takes two inputs, one of which is the text of a program T, and the other the list of inputs to that program I, and what program P does is to tell us whether the program T will halt (i.e. will avoid going into an infinite loop and so will eventually stop running) when it is given input I. Thus program P itself will always terminate, giving either the output "Yes" (if T will halt on input I) or "No" (if T will not halt on input I). We now proceed to prove that such a program P is an impossibility, because if it existed, it would generate an absurdity.
- Program P processes its inputs T and I, calculates whether program T will halt given input I, and then having done this calculation outputs either "Yes" or "No" before terminating. What we now do is to edit P to create a slightly different program Q, by replacing both the input routine and also the instructions that follow the calculation. First, we fix program Q to take only a single input X, treating this as playing the roles of both T and I. Secondly, at the point where program P says "output('Yes')" (or whatever the appropriate instruction is in the programming language being used), program Q says "repeat; output('Loop!'); until 0=1". This instructs the program to output the word "Loop", and to continue doing so until 0 equals 1 (which, of course, never happens, so the loop continues forever).
- The question we can now ask is: Does program Q halt when given the text of program Q as input? We will find that no consistent answer can be given. Suppose on the one hand that Q would halt given Q as input. Then program P, given the inputs Q and Q, would end with the instruction "output('Yes')". But in program Q, we have replaced that instruction with an ever-repeating loop. Hence it follows that Q would not after all halt given Q as input, which contradicts the assumption we are making. Suppose on the other hand that Q would not halt given Q as input. Then program P, given the inputs Q and Q, would halt with the instruction "output('No')"; but in this respect program Q is unchanged from P, so it too would halt given Q as input, and again we have a contradiction. Combining the two sides of this dilemma, we have that Q would halt given Q as input if and only if Q would not halt given Q as input, and that is an outright contradiction. So program Q is an impossibility. But program Q was derived from program P by very straightforward editing. It follows that program P must also be an impossibility. Therefore it is not possible to write a program which infallibly tells us whether any program T will halt given input I: the Halting Problem is unsolvable!

- By 1933 Turing had already introduced himself to Russell and Whitehead's Principia Mathematica and so to the then arcane area of mathematical logic. Bertrand Russell had thought of logic as a solid foundation for mathematical truth, but many questions had since been raised about how truth could be captured by any formalism. In particular, in 1931 Gödel had shattered Russell's picture by showing the incompleteness of mathematics: the existence of true statements about numbers which could not be proved by the formal application of set rules of deduction. In 1935, Turing learnt from the lecture course of the Cambridge topologist M. H. A. Newman that a further question, posed by Hilbert, still lay open. It was the question of Decidability, the Entscheidungsproblem. Could there exist, at least in principle, a definite method or process by which it could be decided whether any given mathematical assertion was provable?
- In April 1936 he showed his result to Newman; but at the same moment the parallel conclusion of the American logician Alonzo Church became known, and Turing was robbed of the full reward for his originality. His paper, On Computable Numbers with an application to the Entscheidungsproblem, had to refer to Church's work, and was delayed until August 1936. However it was seen at the time that Turing's approach was original and different; Church relied upon an assumption internal to mathematics, rather than appealing to operations that could actually be done by real things or people in the physical world. Subsequently, the concept of the Turing machine has become the foundation of the modern theory of computation and computability.
- It is hard now not to think of a Turing machine as a computer program, and the mechanical task of interpreting and obeying the program as what the computer itself does. Thus, the Universal Turing Machine embodies the essential principle of the computer: a single machine which can be turned to any well-defined task by being supplied with the appropriate program.
- In common with other outstanding young scientists, Turing spent two years at Princeton University enrolled as a graduate student. He arrived in September 1936. On Computable Numbers... was published at the very end of 1936 and attracted some attention; by the time he left, the idea had come to the attention of the leading Hungarian-American mathematician John von Neumann. But Turing certainly did not shoot to fame. He worked on on algebra and number theory; on showing that his definition of computability coincided with that of Church; and on an extension of his ideas (Ordinal Logics) which provided a Ph.D. thesis.
- True to the concreteness of the Turing machine, he also spent time at Princeton making a cipher machine based on using electromagnetic relays to multiply binary numbers. Even then he saw a link from 'useless' logic to practical computation. Although not one of the political intellectuals of the 1930s, Turing followed current events and was influenced in studying ciphers by the prospect of war with Germany.

- Turing (1948 ?) "...an unlimited memory capacity obtained in the form of an infinite tape marked out into squares, on each of which a symbol could be printed. At any moment there is one symbol in the machine; it is called the scanned symbol. The machine can alter the scanned symbol, and its behavior is in part determined by that symbol, but the symbols on the tape elsewhere do not affect the behavior of the machine. However, the tape can be moved back and forth through the machine, this being one of the elementary operations of the machine. Any symbol on the tape may therefore eventually have an innings."

- Il n'est admis qu'au King's College de l'université de Cambridge, alors qu'il avait demandé Trinity College en premier choix. Il étudie de 1931 à 1934 sous la direction de Godfrey Harold Hardy, mathématicien alors titulaire de la chaire sadleirienne puis responsable du centre de recherches et d'études en mathématiques. Il suit également les cours d'Arthur Eddington et, la dernière année, de Max Newman qui l'initie à la logique mathématique, notamment aux problèmes fondamentaux posés quelques années plus tôt par l'Allemand David Hilbert. En 1935, Turing est élu fellow du King's College, l'équivalent d'une bourse de thèse, grâce à sa démonstration du théorème central limite5.
- Turing le fait en imaginant, non une machine matérielle, mais un « être calculant », qui peut être indifféremment un appareil logique très simple ou un humain bien discipliné appliquant des règles — comme le faisaient les employés des bureaux de calcul à l'époque. Dans le cours de son raisonnement, il démontre que le problème de l'arrêt d’une machine de Turing ne peut être résolu par algorithme : il n’est pas possible de décider avec un algorithme (c’est-à-dire avec une machine de Turing) si une machine de Turing donnée s’arrêtera. Bien que sa preuve ait été publiée après celle d'Alonzo Church, le travail de Turing est plus accessible et intuitif9. Il est aussi complètement nouveau dans sa présentation du concept de « machine universelle » (de Turing), avec l'idée qu'une telle machine puisse accomplir les tâches de n'importe quelle autre machine. L'article présente également la notion de nombre réel calculable. Il déduit de l'indécidabilité du problème de l'arrêt que l'on peut définir des nombres réels qui ne sont pas calculables. Il introduit les concepts de programme et de programmation
- Turing passe la plus grande partie de 1937 et de 1938 à travailler sur divers sujets à l'université de Princeton, sous la direction du logicien Alonzo Church
- Il obtient en mai 1938 son Ph.D.12 de l'université de Princeton ; son manuscrit présente la notion d'hypercalcul, où les machines de Turing sont complétées par ce qu'il appelle des oraclesd, autorisant ainsi l'étude de problèmes qui ne peuvent pas être résolus de manière algorithmique. L'appellation de « machine de Turing » vient de Church, son directeur de thèse, qui l'emploie pour la première fois dans un compte-rendu du travail de son élève dans le Journal of Symbolic Logic.
- De retour à Cambridge en 1939, il assiste à des cours publics de Ludwig Wittgenstein sur les fondements des mathématiques. Tous deux discutent avec véhémence et constatent leur désaccord, Turing défendant le formalisme alors que Wittgenstein pense que les mathématiques sont surestimées et qu'elles ne permettent pas de découvrir une quelconque vérité absolue.

- In 1935, at the age of 22, he was elected a fellow of King's on the strength of a dissertation in which he proved the central limit theorem,[32] despite the fact that the committee had failed to identify that it had already been proven in 1922 by Jarl Waldemar Lindeberg.[33]
- In 1936, Turing published his paper "On Computable Numbers, with an Application to the Entscheidungsproblem" (1936).[34] In this paper, Turing reformulated Kurt Gödel's 1931 results on the limits of proof and computation, replacing Gödel's universal arithmetic-based formal language with the formal and simple hypothetical devices that became known as Turing machines. He went on to prove that there was no solution to the decision problem by first showing that the halting problem for Turing machines is undecidable: It is not possible to decide algorithmically whether a Turing machine will ever halt.
- Although Turing's proof was published shortly after Alonzo Church's equivalent proof[35] using his lambda calculus, Turing's approach is considerably more accessible and intuitive than Church's.[36] It also included a notion of a 'Universal Machine' (now known as a universal Turing machine), with the idea that such a machine could perform the tasks of any other computation machine (as indeed could Church's lambda calculus).
- John von Neumann acknowledged that the central concept of the modern computer was due to Turing's paper.
- From September 1936 to July 1938, Turing spent most of his time studying under Church at Princeton University. In addition to his purely mathematical work, he studied cryptology and also built three of four stages of an electro-mechanical binary multiplier.
- When Turing returned to Cambridge, he attended lectures given in 1939 by Ludwig Wittgenstein about the foundations of mathematics.[42] Remarkably, the lectures have been reconstructed verbatim, including interjections from Turing and other students, from students' notes.[43] Turing and Wittgenstein argued and disagreed, with Turing defending formalism and Wittgenstein propounding his view that mathematics does not discover any absolute truths, but rather invents them.[44]

- Newman 1955 : "This paper is full of interesting suggestions and ideas. ... [It] throws much light on Turing's views on the place of intuition in mathematical proof."
- Turing 1936 : "... which can be made to do the work of any special-purpose machine, that is to say to carry out any piece of computing, if a tape bearing suitable "instructions" is inserted into it."

- exemple d'une machine pour la soustraction  départ : "11111-111="
scanright	space	scanright	space	right
scanright	1	scanright	1	right
scanright	minus	scanright	minus	right
scanright	equal	eraseone	space	left
eraseone	1	subone	equal	left
eraseone	minus	HALT	space	n/a
subone	1	subone	1	left
subone	minus	skip	minus	left
skip	space	skip	space	left
skip	1	scanright	space	right
(http://goodmath.scientopia.org/2012/06/24/turing-machines-what-they-are-what-they-arent/)

- In 1936, however, Turing’s immediate purpose was purely theoretical. And indeed it was to show not what could be mechanized in mathematics, but what could not. In 1931, Gödel’s theorem had shown that there were limits to what could be proved in mathematics, and Turing wanted to understand the boundaries of what could ever be done by any systematic procedure in mathematics.

- William Newman (son of max newman) picks the story up: "At one point he posed his class a question: could the provability of mathematical statements be discovered by a mechanical process? This question lodged in Alan's mind, and gradually he developed the paper that was to make his reputation in the mathematical world, and later in computer science: On Computable Numbers, with an Application to the Entscheidungsproblem."
