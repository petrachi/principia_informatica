Au congrés international de Bologne, Hilbert expose trois problèmes ouvert du programme formaliste. L'axiomatique formelle est-elle compléte, consistante et décidable ?
L'espérance de Hilbert est qu'on pourra apporter une réponse positive à ces trois questions, ce qui permettrait d'abord de fonder la construction mathématique moderne, et de vérifier plsieurs hypothéses auquelles Hilbert croit. Que les nombres et les objets mathématiques existent en soi, et d'un autre côté, que tout problème mathématique est résoluble, soit démontrable, soit réfutable.
C'est finalement Kurt Gödel qui apportera une réponse aux deux premiers problèmes, puis Alonzo Church qui donnera en premier une solution au troisième probléme.
Kurt Gödel, né en 1906, a terminé ses études mathématiques en 1923, pour ensuite aller enseigner à l'universite de Vienne. Né à Brno, en Autriche-Hongrie, il sera naturalisé Tchécoslovaque à l'issue de la première guerre mondiale et de la dissolution de l'Autriche-Hongrie. Attaché à ses racine Autrichiennes, il se fera volontairement naturaliser autrichien à 23 ans, puis, deviendra Allemand lors de l'annexion de l'autriche par l'Allemagne nazie. Il perdra à ce moment là son titre d'enseignant, il semblairait qu'on l'ait pris pour un juif. Il partira finalement aux États-Unis en 1939, de peur d'être enrôlé dans l'armée, et obtiendra de justesse la double nationnalité austro-américaine. Lors de son entretient avec le juge chargé de sa naturalisation, le juge s'enquiert du régime politique en Autriche. Gödel réponds que celui-ci était autrefois une démocratie, mais qu'il s'est aujourd'hui transformé en dictature. Le juge rétorque qu'une telle chose ne pourrait arriver en Amérique, mais Gödel, qui a minutieusement étudié la constitution en vue de son entretient, rétorque le contraire, et dit qu'il peut le prouver. Heureusement, le juge connait l'un des témoins de Gödel : Albert Einstein, et décide de couper court à l'entretient.
Retour en 1928, Gödel est présent au congrés international de Bologne, et va trouver un interêt dans les questions du programme formaliste.
Alors qu'Hilbert avait annoncé que lui-même et Ackermann étaient en mesure de démontrer la complétude des "prédicats du premier ordre", la partie de l'arithmétique qui définit les régles logiques de déduction, c'est en fait Gödel qui en démontrera la complétude.
Hilbert avait également annoncé qu'Ackermann et Von Neumann possédaient une preuve de la consistance de l'axiomatique formelle. En fait, la preuve est fausse, c'est Von Neumann qui le remarquera, et ce sont les théorèmes de Gödel qui expliquent les raisons de cet echec.
Gödel publie deux théorèmes, appellé "théorémes d'incomplétudes", en 1931. Le premier théorème se dit comme suit : "Si l'arithmétique élémantaire est ω-consistante, elle comporte des formules fermées qui ne sont ni démontrables, ni réfutables à partir des axiomes.". Gödel établit ce premier théorème pendant l'été 1930, et va le présenter au cours d'un colloque à Köningsberg. Seul Von Neumann, qui était présent, réalise l'importance du travail de Gödel. Il écrit quelques mois plus tard en disant qu'il à réussit à déduire un second théorème à partir du premier, que "la consistance d'un systéme ne peut pas être établie au moyen de raisonnements qui se laisseraient formaliser dans le systéme.", mais Gödel était arrivé à la même conclusion quelques jours avant seulement, et à déjà envoyé son manuscrit à une revue de Vienne, qui le publiera en 1931. L'article sera présenté comme thèse d'habilitation pour Gödel, et sera accepté à quarante-neuf contre un.
Ce que disent ces deux théorème aura un impact profond sur le programme formaliste tel que l'avait pensé Hilbert. Le premier nous dit que l'axiomatique formelle, ou n'importe quelle language formel suffisament riche pour exprimer les nombres entiers, et les opérations d'addition et de multiplication, ne peut pas, c'est impossible, être à la fois consistnte et complète.
En fait, Gödel réussit à créer, à partir des axiomes, une formule qui dit : "Je ne suis pas démontrable". Si on pouvait démontrer cette formule, alors c'est une catastrophe, puisqu'on a un système d'axiome qui démontre des choses fausse ! C'est à dire qu'il n'est pas consistant. Mais dans l'autre cas, si la formule n'est effectivement pas démontrable, alors on a une proposition qui est vraie, et que pourtant, on ne peut pas démontrer, le système est donc incomplet.
Le second théorème lui, nous dit qu'on ne peut pas prouver la consistance d'un système à l'aide de ce même système. Le but du programme de fondement était de démontrer la consistance de l'artithmétique, et donc de toutes les mathématiques, à l'aide de la mathématique finististe, qui elle est directement évidente et n'a pas besoin d'être justifiée. Le second théorème d'imcomplétude nous dit qu'on ne pourra jamais réussir cela, puisque la mathématique finitiste est formalisable en arithmétique, on ne peut pas l'utiliser pour une preuve de consistance.
Si l'on en croit Bernays, Hilbert se mit en colère lorsqu'il apprit les résultats de Gödel. Le programme formaliste serait-il fini ? Pas tout à fait. Si les théorèmes d'incomplétudes excluent la mathématique finitiste comme fondement aux mathématiques, ils n'excluent pas d'autres théories. Von Neumann commentera de la même façon bien plus tard, en 1958 : "Ce résultat imposant de l'analyse de Godel ne doit pas être mal compris: il n'exclut pas une preuve  méta-mathématique de la consistance de l'arithmétique. [...] Gödel a montré qu'aucune preuve n'est possible qui peut être représentée au sein de l'arithmétique. Son argument ne supprime pas la possibilité de preuves strictement finitiste qui ne sont pas représentés au sein de l'arithmétique. Mais personne aujourd'hui ne semble avoir une idée claire de ce qu'une preuve finitiste serait qui ne serait pas formulable dans l'arithmétique."
Gödel lui-même dira : "il reste un espoir pour que dans le futur on puisse trouver des méthodes satisfaisantes [...] dépassant les limites du système [finitiste de Hilbert] et permettant de fonder l'arithmétique classique et l'analyse. Cette question ouvre un champ de recherches fécond". Dans une autre citation, il ajoute : "la conviction dans la décidabilité de tout problème mathématique n'est pas ébranlée par ce résultat".
Le programme formaliste n'est donc pas mort, et il reste toujours la question de la décidabilité, à savoir, est-ce qu'il existe une procédure effective permettant de dire si une formule est démontrable ? Mais avant de pouvoir répondre à cette question, il faut d'abord définir clairement ce que l'on entends par "procédure effective". Et cette tâche devient d'autant plus pressante que la généralisation du premier théorème d'incomplétude de Gödel nécéssite cette définition.
Depuis la théorie des fonctions au 18eme siècle, la notion de "calcul" (à laquelle se rapporte celle de "procédure éffective") et associée à la notion de fonction. Mais la notion de fonction évolue au 19eme siècle, pour simplement décrire une correspondance entre un ensemble de départ, et un ensemble d'arrivé, sans qu'il n'y ait nécéssairement de calcul effectif. Alors, une question se pose, comment définir le cercle des fonctions "calculables" ?
Dans les années vingt, plusieurs mathématiciens vont tenter de caractériser cette notion, Herbrand par exemple dira : "toutes les fonctions introduites devront être effectivement calculables pour toutes les valeurs de leurs arguments, par des opérations décrites entièrement d'avance". Von Neumann aura une approche différente, dans un discours où il parle de la place qu'aurait les mathématiques, si le programme d'Hilbert était validé : "à leur place, il y aurait une instruction absolument mécanique à l'aide de laquelle quiconque pourrait décider, à partir de n'importe quelle formule donnée, si elle est ou non démontrable".
Alors de l'autre côté de l'Atlantique, à Princeton où s'est installé Von Neumann, on trouve Alonzo Church, qui, aprés avoir obtenu son diplôme en 1924, il va profiter de sa bourse de doctarat pour voyager, et rencontrer Hilbert et Bernays à Göttingen, puis Brouwer à Amsterdam.
En 1936, Church va dévellopper une nouvelle méthode pour définir une fonction, ce que l'on appelle le λ-calcul.
L'idée de base du λ-calcul est que tout est fonction. Une fonction en particulier est exprimée par une expression qui peut contenir des fonctions qui ne sont pas encore définies et qui sont alors remplacées par des variables. Il y a donc, parmi les expressions du λ-calcul, des expressions qui contiennent des variables. On peut ensuite "appliquer" une fonction à une autre, on a donc une opération de base, que l'on note A.B, Appliquer la fonction A à la fonction B.
Sur cette base, on peut construire quelques fonctions intéressantes, comme la fonction identité, qui est la fonction qui à x fait correspondre x, autrement dit la fonction λx.x. On peut aussi construire les fonctions constantes égales à x, à savoir λy.x. De là on peut construire la fonction qui fabrique les fonctions constantes, pourvu qu'on lui donne la constante comme paramètre, autrement dit la fonction λx.(λy.x), c'est-à-dire la fonction qui à x fait correspondre la fonction constamment égale à x.
Church va se servir du λ-calcul pour définir la calculabilité, il assume qu'une fonction sur les nombres naturel est "calculable" si elle peut être exprimée sous la forme d'un λ-calcul.
Gödel, qui lui aussi travaillait sur une définition de la calculabilité, ne sera pas tout à fait convaincu de cette définition, Chruch nous dit : "Sa seule idée à ​​l'époque était qu'il pourrait être possible, en termes de calculabilité efficace comme notion non définie , d'énoncer un ensemble d'axiomes qui incarneront les propriétés généralement reconnus de cette notion, et de faire quelque chose sur cette base".
Stephen Cole Kleene, un des étudiants de Hilbert, n'est lui non plus, pas convaincu directement. Pour lui, il semble que la méthode de diagonalisation prévient toute définition du concept de calculabilité : Une fois qu'on a une définition, on liste toutes les fonctions calculables, puis, par diagonalisation, on crée une nouvelle fonction calculable qui n'est pas dans la liste, donc la définition est mauvaise. Mais, comme se souvient Kleene en 1979, l'application de la méthode de diagonalisation n'est pas évidente : "Lorsque Church me proposa sa thèse [pour une définition de la calculabilité], je me mis aussitôt à la tâche de la réfuter par une diagonalisation de la classe des fonctions [calculables]. Mais, réalisant vite que la diagonalisation ne pouvait être faite de façon effective, je devins du jour au lendemain partisan de la thèse de Church".
Toujours en 1936, mais en Angleterre cette fois, au King's College de Cambridge, c'est un autre jeune mathématicien qui va apporter sa propre définition de la calculabilité, et, comme Church, en profiter pour répondre au problème de décision du programme formaliste, c'est Alan Turing.
La vision mécanique du calcul s'était largement répandue en Grande-Bretagne, on la retrouve par exemple chez Hardy et Newman, et c'est par l'intermédiaire de Newman que Turing va prendre connaissance du programme de fondement et du problème de la décision.
Turing va assister au cours de Newman en 1935 titré "Fondement des mathématiques". Dans ce cours, Newman exposait le programme de fondement de Hilbert, les questions ouvertes présentés au congrés de Bologne, et les théorèmes d'incomplétudes de Gödel.
Newman présupposait que la solution au problème de la décision serait faux, dans son cours il dit : "Supposons, par exemple, que nous puission trouver un système fini de règles qui nous permettrait de dire si une formule quelconque est ou non démontrable. Ce système contiendrait un théorème de métamathématique. Évidemment, ce théorème n'existe pas et c'est heureux, parceque s'il existait, nous aurions un ensemble mécanique de règles nous permettant de trouver la solution de tous les problèmes mathématiques et notre activité en tant que mathématiciens cesserait d'exister."
C'est l'insistance de Newman sur l'aspect mécanique du calcul qui pousse Turing à décrire une machine qui pourra servir de définition au calcul. Comme William Newman, le fils fils de Max Newman, le raconte : "À un moment, il a posé sa classe une question: la prouvabilité des énoncés mathématiques pourrait-elle être découvert par un procédé mécanique ? Cette question est restée dans l'esprit d'Alan, et peu à peu, il a développé le papier qui allait faire sa réputation dans le monde mathématique, et plus tard dans la science informatique : On Computable Numbers, with an Application to the Entscheidungsproblem".
C'est à la fin de l'été 1936, deux mois seulement aprés les résultats de Church, que Turing présente à Newman son article, dans lequel il décrit une machine qui servira de définition à la calculabilité, accompagné d'une solution au problème de la décision.
Il faut noter que Turing, au moment où il rédige son article, n'a pas encore connaissance des résultats de Church, et ça ne fera d'ailleurs aucun doute dans la communauté mathématique, tant les deux approches sont différentes. L'article final, publié en janvier 1937, ajoutera une référence au travail de Church, et une annexe dans laquelle Turing montre que sa méthode et celle de Church sont identiques, tout ce que l'on peut calculer à l'aide d'une machine de Turing est calculable à l'aide de λ-calcul, et tout ce qui est calculable à l'aide de λ-calcul est calculable par une machine de Turing.
L'article de Turing commence comme cela : "Selon ma définition, un nombre est calculable si [il] peut être écrit par une machine. [...] Dans un article récent Alonzo Church a introduit l'idée de «calculabilité effective», ce qui équivaut à ma «calculabilité», mais est définie de manière très différente. Church atteint également des conclusions similaires au sujet du problème de la décision. La preuve de l'équivalence entre «calculabilité» et «calculabilité effective» est décrite dans une annexe au présent document."
Il décrit ensuite les éléments qui composent sa machine : "On peut comparer un homme en train de calculer un nombre à une machine qui est seulement capable d'un nombre fini de conditions, qui sera appelé "m-configurations". La machine est livrée avec une "bande" (l'analogue de papier) qui la traverse, et est divisée en sections (appelé "carrés") capables chacun de porter un "symbole". A tout moment, il y a juste un carré [...] qui est "dans la machine". Nous pouvons appeler cette place le "carré lu". Le symbole sur la carré lu peut être appelé le "symbole lu". Le "symbole lu" est le seul dont la machine est, pour ainsi dire, "directement au courant". Cependant, en modifiant sa m-configuration la machine peut se rappeler efficacement certains des symboles qu'il a "vu" précédemment. Le comportement de la machine possible à tout moment est déterminé par la m-configuration [...] et [...] le symbole lu. Cette paire [...] sera appelé "configuration" : ainsi la configuration détermine le comportement possible de la machine. Dans certaines configurations dans lesquelles le carré lu est vierge (i.e. il ne porte pas de symbole), la machine écrit un nouveau symbole sur la place balayée: dans d'autres configurations, il efface le symbole lu. La machine peut également changer le carré en cours de lecture, mais seulement en le déplaçant d'une case à droite ou à gauche. En plus de l'une de ces opérations, la m-configuration peut être modifiée. Certains des symboles écrits formeront la séquence de chiffres [...] du nombre [...] qui est calculé. Les autres ne sont que des brouillons pour "aider la mémoire". [...] Je soutiens que ces opérations comprennent toutes celles qui sont utilisés dans le calcul d'un nombre."
La description de la machine est volontairement courte et minimaliste, et à sa lecture, Newman commença d'abord par douter qu'une structure si simple puisse parvenir à effectuer tous les calculs. Mais c'est volontaire de la part de Turing, il implique directement le lecteur, qui doit, s'il veut comprendre le concept présenté, mettre en place des exemples, et se mettre à la place de la machine en train de calculer.
Turing considére sa machine comme analogue à la pensée humaine, et il va utiliser, pour justifier sa définition de calculabilité, à des arguments épistémologiques, qui ne font pas appels à la science formelle, mais à l'intuition, à ce qui est évidemment vrai. L'indentification du lecteur à la machine ne peut que renforcer cet argument.
Turing propose d'ailleurs quelques exemples de calculs pour sa machine : "Une machine peut être construite pour calculer la séquence 01010 ... [...] La machine posséde quatre m-configurations "b", "c", "f", "e" et est capable d'écrire "0" et "1". Le comportement de la machine est décrite dans le tableau suivant dans lequel "R" [ndl: Right en anglais, Droite] signifie "la machine se déplace de sorte à lire le carré immédiatement à la droite de celui qui était auparavant lu". De même, pour "L" [ndl: Left, Gauche]. "E" [ndl: Erase] signifie "le symbole lu est effacé" et "P" [ndl: Print] signifie "écrire". La machine démarre dans la m-configuration "b" et une bande vide. [b None P0, R c; c None R e; e None P1, R f; f None R b]".
Il faut que j'insiste sur un point avant de continuer. La table qui décrit le comportement de la machine est unique pour chaque machine. C'est à dire qu'une machine de Turing en particulier n'est capable de réaliser qu'un seul calcul. Et à chaque séquence calculable correspond une machine. Donc, on peut considérer que la séquence 01010 ... est définie par la table de la machine qui la calcule. Si l'on liste la totalité des m-configurations de cette machine, et qu'on liste la totalité des symboles que la machine peut écrire, on peut définir chaque comportement de la machine sous une forme standard, par exemple : si la machine est dans la première m-configuration et qu'elle voit le premier symbole de la liste, alors elle se déplace vers la droite et écrit le second symbole.
Turing peut ainsi établir un code afin de décrire en même temps la table d'opération d'une machine, et une séquence calculable : la m-configuration sera décrite en untilisant "D", suivi de la lettre "A" autant de fois que nécéssaire pour décrire sa position dans la liste des m-configuration. Ainsi, la première m-configuration sera codée "DA", la seconde m-configuration sera "DAA", etc. Pour les symboles, il utilise la lettre "D" suivi de la lettre "C". Le premier symbole sera "DC", le soncd "DCC", etc. Enfin, il utilise les lettres "L", "R" et "N" pour décrire les opérations de se déplace vers la gauche, vers la droite, et ne pas se déplacer. Chaque ligne de la table d'insctruction sera séparé par un ";".
Cette codification est appellé la "description standard" de la machine. La description standard de la machine que nous avons pris en exmple est la suivante : "DADDCRDAA;DAADDRDAAA;DAAADDCCRDAAAA;DAAAADDRDA".
En remplaçant chanque lettre par un chiffre, on obtient le "nombre standard" d'une machine. Le "A" est remplacé par un "1", le "C" par un "2", le "D" par "3", le "L" par "4", le "R" par "5", le "N" par "6" et le ";" par "7". Aussi, le nombre standard de notre machine d'exemple est : 31332531173113353111731113322531111731111335317.
L'idée de Turing est qu'une définition standard, ou qu'un nombre standard, représente une machine de Turing en particulier, et donc une séquence peut-être calculable. Il faut ajouter que toutes les machines de Turing ne représentent pas des séquences calculables, certaines machines peuvent ne jamais s'arrêter de calculer, tourner en boucle. Turing appelle ce genre de machines les machines "circulaires". Les autres, qui décrivent des séquences calculables, sont des machines sans cercles.
Turing va se servir des définitions standard pour résoudre le probléme de l'arrêt, puis le probléme de la décision, qui sont en fait très similaires. Mais avant cela, il nous introduit au concept de machine "universelle".
"Il est possible d'inventer une machine unique qui peut être utilisée pour calculer toute séquence calculable. [...] Si cette machine U est fournie avec une bande sur laquelle est écrite la définition standard d'une machine M, U calculera la même séquence que M."
Turing nous donne une table décrivant la machine universelle. [(assets/TableU(1-2-3)]
L'idée de la machine universelle décrit, pour la première fois, une machine qui ne serait pas spécialisée, comme on avait l'habitude d'en contruire à l'époque de Turing, mais qui pourrait réaliser n'importe quel calcul. Et c'est aussi la première description de l'idée de programme stocké. Deux concepts fondamentaux de l'informatique actuelle.
Mais revenons aux nombres calculables et au problème de décision. On avait vu que Kleene pensait utiliser la digonalisation afin de réfuter la tentative de Church de donner une définition de la calculbilité. Mais Turing va montrer que l'argument de la diagonalisation est mal utilisé : "L'erreur de cet argument réside dans l'hypothèse que B (bêta) est calculable. Il serait vrai si nous pourrions énumérer les séquences calculables par des moyens finis, mais le problème de l'énumération des séquences calculables est équivalent au problème de savoir si un nombre donné est le DN d'une machine sans cercle, et on n'a pas procédé général pour ce faire dans un nombre fini d'étapes. En fait, en appliquant correctement l'argument processus diagonal, on peut montrer qu'il ne peut pas être un tel processus général."
Turing va retourner cet argument de la diagonalisation et montrer qu'il ne peux pas être correctement appliqué. Turing ajoute : "En fait, en appliquant correctement l'argument processus diagonal, on peut montrer qu'il ne peut pas être un tel processus général [pour énumérer la liste des séquences calculables, càd les machines sans cercles]. La preuve la plus simple et la plus directe de cela est en montrant que, si ce processus général existe, alors il y a une machine qui calcule β. Cette preuve, bien que parfaitement valide, présente l'inconvénient qu'elle peut laisser le lecteur avec un sentiment de "il doit y avoir quelque chose de faux". La preuve que je donnerai n'a pas cet inconvénient, et donne une certaine idée de l'importance de l'idée [de machine] sans cercle."
Supposons [...] que nous pouvons inventer une machine D qui, lorsqu'elle est fourni avec la définition standard d'une machine M va tester définition standard et si M est circulaire marquera la définition standard avec le symbole "u" et si elle est sans cercle va la marquer avec "s".
Construisons maintenant une machine U, qui, lorsqu'elle lit le symbole "u" s'arrête immédiatement, et lorsqu'elle lit le symbole "s" se retrouve dans une configuration où elle ne pourra jamais s'arrêter.
On peut associer les machines D et U pour construire une nouvelle machine H. Le comportement de cette machine est le suivant : On lui donne d'abord une description standard que la machine va analyser. Si la description standard correspond à une machine circulaire, alors H s'arrête. Si la description standard correspond à une machine sans cercle, la machine H devient elle-même circulaire, et ne s'arrêtera jamais.
Que se passe-t-il lorsqu'on donne à H sa propre description standard ? Si La description standard de H est analysée comme étant une machine circulaire, H s'arrête, est est donc sans cercle. Mais si la description standard de H est analysée comme une machine sans cercle, H ne s'arrête pas, et est donc sans cercle.
Ce paradoxe nous améne à conclure que la machine H ne peut pas exister, et donc, que la machine D, qui analyse la description qtandard d'une autre machine et nous dit si cette machine est circulaire ou sans cercle, ne peut pas, non plus exister.
En utilisant le même raisonnement, Turing nous montre qu'il est également impossible de contruire une machine qui pourrait prédire si une autre machine va, au cours de son exécution, écrire un certain symbole sur la bande, par exemple un "0".
C'est l'impossibilité de cette machine qui va permetre à Turing de démontrer qu'il ne peut pas exister de procédure capable de décider si une formule est vraie ou fausse : "Correspondant à chaque machine M nous construisons une formule Un(M) et nous montrons que, s'il y a une méthode générale pour déterminer si Un(M) est prouvable, alors il y a une méthode générale pour déterminer si M écrit 0".
Il va prouver que :
- (lemme 1) Si le symbole "0" apparaît sur la bande dans une configuration complète de M, alors Un(M) est prouvable.
- (lemme 2) Si Un(M) est prouvable, alors 0 apparaît sur la bande dans une configuration complète de M.
Puis conclut : "Nous sommes maintenant en mesure de montrer que le Entscheidungsproblem [ndl: problème de décision] ne peut être résolu. Supposons le contraire. Il y a un processus général (mécanique) pour déterminer si Un(M) est prouvable. Par lemmes 1 et 2, cela implique qu'il ya un processus pour déterminer si M écrit 0, ce qui est impossible. D'où l'Entscheidungsproblem ne peut être résolu."
Le résultat n'est pas nouveau, puisque Church avait déjà démontré la solution négative au probléme de décision. Mais la solution de Turing est immédiatement évidente, et son évidence sera immédiatement reconnue par le reste de la communauté. Church commentera : "l'identification avec l'effectivité dans l'ordinaire [...] semble immédiatement évident". Et Gödel ajoutera une note à ses théorèmes d'incomplétudes : "Grâce à certains travaux qui ont suivi cet article, en particulier ceux de A. M. Turing, nous disposons désormais d'une définition sûre, précise et adéquate du concept de système formel [...] dont la proprièté est qu'en son sein, et en principe, le raisonnement peut être entièrement remplacé par des règles mécaniques".
Probablement sous l'influence de Newman, Turing ira Church à l'université de Princeton pour devenir son éléve. Dans une lettre à Church, Newman écrit : "Je dois mentionner que le travail de Turing est entièrement indépendant: il a travaillé sans supervision ou critique de quiconque. Cela rend d'autant plus important qu'il devrait entrer en contact le plus tôt possible avec les principaux travailleurs de ce domaine, de sorte qu'il ne devrait pas se transformer en un solitaire confirmé."


(?)
L'évidence de la définition de Turing vient de son argumentation épistémologique : Turing compare la machine qui calcule à l'esprit humain : "Calculer est normalement fait en écrivant certains symboles sur du papier. On peut supposer que ce papier est divisé en carrés comme le livre d'arithmétique d'un enfant. Dans l'arithmétique élémentaire le caractère à deux dimensions du papier est parfois utilisé. Mais une telle utilisation est toujours évitable, et je pense qu'il sera convenu que les deux caractère dimensionnel de papier n'est pas essentiel au calcul. Je suppose donc que le calcul est effectué sur le papier à une dimension, soit sur une bande divisée en carrés. Je vais aussi supposer que le nombre de symboles qui peuvent être imprimés est fini. [...] L'effet de cette restriction du nombre de symboles est pas très grave. Il est toujours possible d'utiliser des séquences de symboles à la place des symboles simples. Ainsi, un chiffre arabe, comme 17 ou 999999999999999 est normalement traité comme un symbole unique. [...]. Les différences par rapport à notre point de vue entre les symboles simples et composés est que les symboles composés, si elles sont trop longues, ne peuvent pas être observés à un coup d'œil. Ceci est en accord avec l'expérience. Nous ne pouvons pas dire à un coup d'oeil si 9999999999999999 et 999999999999999 sont les mêmes."



(?)
Aprés "On Computable Numbers", une idée va rester dans la tête de Turing : construire, réelement, une machine de Turing universelle. Le meilleur témoignage que l'on a vient de Newman, le professeur de Turing à cette époque : "[je n'arrive pas à la trouver, mais ça vient de 'Newman in interview with Christopher Evans The Pioneers of Computing: an Oral History of Computing']".
Mais Turing ne connaissait à ce moment là aucune technologie satisfaisante pour mener son projet à bien. Sur ce point là il se trompait, mais en attendant de découvrir la technologie qu'il lui fallait, il ira travailler à Princeton sous la Direction de Church, et c'est d'ailleurs Church, dans un compte-rendu du travail de son élève, qui pour la première fois, utilisera l'appelation de la "machine de Turing".


===
Turing (web)
===


- In common with other outstanding young scientists, Turing spent two years at Princeton University enrolled as a graduate student. He arrived in September 1936. On Computable Numbers... was published at the very end of 1936 and attracted some attention; by the time he left, the idea had come to the attention of the leading Hungarian-American mathematician John von Neumann. But Turing certainly did not shoot to fame. He worked on on algebra and number theory; on showing that his definition of computability coincided with that of Church; and on an extension of his ideas (Ordinal Logics) which provided a Ph.D. thesis.

- exemple d'une machine pour la soustraction  départ : "11111-111="
scanright	space	scanright	space	right
scanright	1	scanright	1	right
scanright	minus	scanright	minus	right
scanright	equal	eraseone	space	left
eraseone	1	subone	equal	left
eraseone	minus	HALT	space	n/a
subone	1	subone	1	left
subone	minus	skip	minus	left
skip	space	skip	space	left
skip	1	scanright	space	right
(http://goodmath.scientopia.org/2012/06/24/turing-machines-what-they-are-what-they-arent/)



===
Turing (books)
===



- In the work of Turing and his contemporaries, the terms “procedure”, “finite process”, and (as mostly used by Turing) “machine” occur more often than “algorithm”. All these terms, however, point to the same idea: a process of symbolic computation fixed by an unambiguous and finite description.
- The word “algorithm” originates in the medieval “algorism” as a recipe to perform calculations with numbers, originally just natural numbers. “Algorism” goes back to one of the most brilliant scientists of the islamic culture, Al-Khwarizmi (around 780–850)
- The most influential ones were his book on algebra (“Kitab al-mukhtasar fi ¯hisab al-jabr wa’l-muqabala”) and his text “Computing with the Indian Numbers” (“Kitab al-Jam ¯ ˘wa-l-tafr{Nq bi-Phisab al-Hind”) ... in which he describes the execution of the basic operations of arithmetic
- Le texte original à été perdu, ainsi que les sources, et ce qu'on a de mieux est une traduction latin conservée à l'université de Cambridge. Le livre cependant apparait cryptique, il y est confondu citation (de al kawarismi) et des commentaires (du copiste). Plusieurs parties où auraient du apparaitre des chiffres sont laissées vides (le moine ne devait probablement pas vouloir écrire ces signes étranges). Et il apparait plusieurs fois dans le livre la phrase : "but now let us return to the book". également, plusieurs paragraphes commencent par "Dixit Algorizmi", which motivated the term “algorism” for the procedures described in this work.
- It is noteworthy that this concept of “algorithm” clearly refers to a process of symbol manipulation, in contrast to calculations performed on the abacus.

- Newman’s own contribution was not limited to bringing the Entscheidungsproblem to Turing’s notice. In his lectures, Newman defined a constructive process as one that a machine can carry out. He explained in an interview: "And this of course led [Turing] to the next challenge, what sort of machine, and this inspired him to try and say what one would mean by a perfectly general computing machine.""



===
Gödel (Livre)
===

- Gôdel croit en l'existance en soi des objets mathématiques (en ooposition à l'intuitionnisme, pour lequel un objet existe quand le mathématicien le crée)
- Gödel 1947 : "[...] les concepts et les théorémes de la théorie des ensembles décrivent une réalité bien déterminée, dans laquelle la conjecture de Cantor est vraie ou fausse. Ainsi son indécidabilité à partir des axiomes acceptés aujourd'hui peut seulement signifier que ces axiomes ne contiennent pas une description complète de cette réalité."
- Gödel 1947 : "les mathématiques décrivent une réalité non sensible, qui existe indépendament des actes et des facultés de l'esprit humain et n'est que perçue, et probablement perçue de façon très incomplète."
